import React, { useEffect, useState } from "react";
import useApi from "../../hooks/useApi";
import Swal from 'sweetalert2';

const EditBloodPage = () => {
    const { getAppointments, loading, error, addAppointmentVolume } = useApi();
    const [appointments, setAppointments] = useState([]);
    const [nameSearch, setNameSearch] = useState("");
    const [phoneSearch, setPhoneSearch] = useState("");
    const [filtered, setFiltered] = useState([]);
    const [volumes, setVolumes] = useState({});

    useEffect(() => {
        const fetchData = async () => {
            try {
                const data = await getAppointments();
                setAppointments(data.data);
                setFiltered(data.data);
                
                // Kh·ªüi t·∫°o volumes t·ª´ d·ªØ li·ªáu c√≥ s·∫µn
                const initialVolumes = {};
                data.data.forEach(item => {
                    initialVolumes[item.Appointment_ID] = item.Volume || "";
                });
                setVolumes(initialVolumes);
            } catch (err) {
                setAppointments([]);
                setFiltered([]);
            }
        };
        fetchData();
    }, [getAppointments]);

    const handleSearch = () => {
        let result = appointments;
        if (nameSearch.trim()) {
            result = result.filter(item =>
                item.Name?.toLowerCase().includes(nameSearch.toLowerCase())
            );
        }
        if (phoneSearch.trim()) {
            result = result.filter(item =>
                item.Phone?.toLowerCase().includes(phoneSearch.toLowerCase())
            );
        }
        setFiltered(result);
    };

    const handleVolumeChange = (id, value) => {
        setVolumes(prev => ({
            ...prev,
            [id]: value
        }));
    };

    const handleSave = async (id) => {
        const volume = volumes[id];
        
        if (!volume || isNaN(volume) || Number(volume) <= 0) {
            await Swal.fire({
                title: 'L·ªói!',
                text: 'Vui l√≤ng nh·∫≠p l∆∞u l∆∞·ª£ng h·ª£p l·ªá (s·ªë > 0)!',
                icon: 'error',
                confirmButtonColor: '#dc2626',
                confirmButtonText: 'ƒê√£ hi·ªÉu'
            });
            return;
        }

        // Popup x√°c nh·∫≠n
        const result = await Swal.fire({
            title: '‚ö†Ô∏è X√°c nh·∫≠n l∆∞u th√¥ng tin',
            html: `
                <div style="text-align: left; padding: 20px;">
                    <div style="background: #fef3c7; padding: 15px; border-radius: 8px; margin-bottom: 15px; border-left: 4px solid #f59e0b;">
                        <h4 style="color: #92400e; margin: 0 0 10px 0;">üìã Th√¥ng tin s·∫Ω ƒë∆∞·ª£c l∆∞u:</h4>
                        <p style="margin: 5px 0;"><strong>Appointment ID:</strong> ${id}</p>
                        <p style="margin: 5px 0;"><strong>L∆∞u l∆∞·ª£ng m√°u:</strong> ${volume} ml</p>
                    </div>
                    
                    <div style="background: #fef2f2; padding: 15px; border-radius: 8px; border-left: 4px solid #dc2626;">
                        <h4 style="color: #dc2626; margin: 0 0 10px 0;">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</h4>
                        <ul style="margin: 0; padding-left: 20px; font-size: 14px; line-height: 1.6;">
                            <li><strong>Sau khi l∆∞u, b·∫°n KH√îNG th·ªÉ thay ƒë·ªïi th√¥ng tin n√†y</strong></li>
                            <li>Vui l√≤ng ki·ªÉm tra k·ªπ l∆∞u l∆∞·ª£ng m√°u tr∆∞·ªõc khi x√°c nh·∫≠n</li>
                            <li>Th√¥ng tin s·∫Ω ƒë∆∞·ª£c ghi nh·∫≠n v√†o h·ªá th·ªëng vƒ©nh vi·ªÖn</li>
                        </ul>
                    </div>
                </div>
            `,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc2626',
            cancelButtonColor: '#6b7280',
            confirmButtonText: '‚úÖ X√°c nh·∫≠n l∆∞u',
            cancelButtonText: '‚ùå H·ªßy b·ªè',
            width: '500px',
            padding: '0'
        });

        if (!result.isConfirmed) {
            return;
        }

        try {
            await addAppointmentVolume(id, String(volume));
            
            // C·∫≠p nh·∫≠t l·∫°i appointment trong state ƒë·ªÉ hi·ªÉn th·ªã volume ƒë√£ l∆∞u
            setAppointments(prev => prev.map(item => 
                item.Appointment_ID === id 
                    ? { ...item, Volume: volume }
                    : item
            ));
            
            setFiltered(prev => prev.map(item => 
                item.Appointment_ID === id 
                    ? { ...item, Volume: volume }
                    : item
            ));

            await Swal.fire({
                title: '‚úÖ L∆∞u th√†nh c√¥ng!',
                html: `
                    <div style="text-align: center; padding: 20px;">
                        <div style="background: #f0fdf4; padding: 20px; border-radius: 12px; margin-bottom: 15px;">
                            <h4 style="color: #16a34a; margin: 0 0 10px 0;">üìä Th√¥ng tin ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n</h4>
                            <p style="margin: 5px 0; font-size: 15px;"><strong>Appointment ID:</strong> ${id}</p>
                            <p style="margin: 5px 0; font-size: 15px;"><strong>L∆∞u l∆∞·ª£ng:</strong> ${volume} ml</p>
                        </div>
                        
                        <div style="background: #eff6ff; padding: 15px; border-radius: 8px;">
                            <p style="margin: 0; font-size: 14px; color: #1d4ed8;">
                                <strong>üí° L∆∞u √Ω:</strong> Th√¥ng tin n√†y ƒë√£ ƒë∆∞·ª£c kh√≥a v√† kh√¥ng th·ªÉ ch·ªânh s·ª≠a.
                            </p>
                        </div>
                    </div>
                `,
                icon: 'success',
                confirmButtonColor: '#16a34a',
                confirmButtonText: 'ƒê√£ hi·ªÉu',
                width: '450px',
                padding: '0'
            });

        } catch (err) {
            console.error('Error saving volume:', err);
            await Swal.fire({
                title: '‚ùå L∆∞u th·∫•t b·∫°i!',
                text: 'C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i!',
                icon: 'error',
                confirmButtonColor: '#dc2626',
                confirmButtonText: 'Th·ª≠ l·∫°i'
            });
        }
    };

    // Ki·ªÉm tra xem appointment ƒë√£ c√≥ volume ch∆∞a
    const hasVolume = (item) => {
        return item.Volume && item.Volume > 0;
    };

    return (
        <div className="container mx-auto py-8 px-4">
            <h2 className="text-2xl font-bold text-center text-red-600 mb-6">
                Ghi nh·∫≠n l∆∞u l∆∞·ª£ng m√°u ng∆∞·ªùi hi·∫øn
            </h2>
            
            <div className="mb-4 flex justify-center gap-2">
                <label className="py-2 text-lg">T√™n:</label>
                <input
                    type="text"
                    placeholder="Nh·∫≠p T√™n..."
                    className="border px-3 py-2 rounded w-60"
                    value={nameSearch}
                    onChange={(e) => setNameSearch(e.target.value)}
                />
                <label className="py-2 text-lg">S·ªë ƒëi·ªán tho·∫°i:</label>
                <input
                    type="text"
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i..."
                    className="border px-3 py-2 rounded w-60"
                    value={phoneSearch}
                    onChange={(e) => setPhoneSearch(e.target.value)}
                />
                <button
                    className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
                    onClick={handleSearch}
                >
                    üîç T√¨m ki·∫øm
                </button>
            </div>
            
            <div className="overflow-x-auto">
                <table className="min-w-full bg-white rounded-lg shadow">
                    <thead>
                        <tr className="bg-red-100 text-red-600">
                            <th className="py-3 px-4 text-left">ID</th>
                            <th className="py-3 px-4 text-left">H·ªç T√™n</th>
                            <th className="py-3 px-4 text-left">Nh√≥m M√°u</th>
                            <th className="py-3 px-4 text-left">S·ªë ƒëi·ªán tho·∫°i</th>
                            <th className="py-3 px-4 text-left">L∆∞u l∆∞·ª£ng (ml)</th>
                            <th className="py-3 px-4 text-left">Tr·∫°ng th√°i</th>
                            <th className="py-3 px-4 text-left">H√†nh ƒë·ªông</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filtered.length > 0 ? (
                            filtered.map((item) => {
                                const itemHasVolume = hasVolume(item);
                                return (
                                    <tr key={item.Appointment_ID} className="border-b hover:bg-gray-50">
                                        <td className="py-2 px-4 font-medium">{item.Appointment_ID}</td>
                                        <td className="py-2 px-4">{item.Name}</td>
                                        <td className="py-2 px-4">
                                            <span className="px-2 py-1 bg-red-100 text-red-800 rounded-full text-sm">
                                                {item.Blood_group || "Ch∆∞a c√≥"}
                                            </span>
                                        </td>
                                        <td className="py-2 px-4">{item.Phone}</td>
                                        <td className="py-2 px-4">
                                            {itemHasVolume ? (
                                                // Hi·ªÉn th·ªã volume ƒë√£ l∆∞u (ch·ªâ ƒë·ªçc)
                                                <div className="flex items-center gap-2">
                                                    <span className="px-3 py-2 bg-green-100 text-green-800 rounded border font-medium">
                                                        {item.Volume} ml
                                                    </span>
                                                    <span className="text-green-600 text-sm">‚úÖ</span>
                                                </div>
                                            ) : (
                                                // Input ƒë·ªÉ nh·∫≠p volume m·ªõi
                                                <input
                                                    type="number"
                                                    className="border rounded px-2 py-1 w-24 border-gray-300 focus:border-red-500 focus:outline-none"
                                                    min={1}
                                                    max={500}
                                                    step={1}
                                                    value={volumes[item.Appointment_ID] || ""}
                                                    onChange={e => handleVolumeChange(item.Appointment_ID, e.target.value)}
                                                    placeholder="ml"
                                                />
                                            )}
                                        </td>
                                        <td className="py-2 px-4">
                                            {itemHasVolume ? (
                                                <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                                                    ‚úÖ ƒê√£ ghi nh·∫≠n
                                                </span>
                                            ) : (
                                                <span className="px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium">
                                                    ‚è≥ Ch∆∞a ghi nh·∫≠n
                                                </span>
                                            )}
                                        </td>
                                        <td className="py-2 px-4">
                                            {itemHasVolume ? (
                                                // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√£ ho√†n th√†nh
                                                <span className="px-4 py-1 bg-gray-100 text-gray-600 rounded font-medium text-sm">
                                                    üîí ƒê√£ ho√†n th√†nh
                                                </span>
                                            ) : (
                                                // Hi·ªÉn th·ªã n√∫t L∆∞u
                                                <button
                                                    className="bg-red-500 text-white px-4 py-1 rounded hover:bg-red-600 hover:shadow-md transition-all font-medium"
                                                    onClick={() => handleSave(item.Appointment_ID)}
                                                >
                                                    üíæ L∆∞u
                                                </button>
                                            )}
                                        </td>
                                    </tr>
                                );
                            })
                        ) : (
                            <tr>
                                <td colSpan={7} className="text-center py-8 text-gray-500">
                                    <div className="flex flex-col items-center">
                                        <div className="text-4xl mb-2">üìã</div>
                                        {loading
                                            ? "ƒêang t·∫£i d·ªØ li·ªáu..."
                                            : error
                                                ? "Kh√¥ng th·ªÉ t·∫£i danh s√°ch appointments"
                                                : "Kh√¥ng c√≥ appointment n√†o"}
                                    </div>
                                </td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>

            {/* Th·ªëng k√™ */}
            <div className="mt-6 flex justify-center gap-4">
                <div className="bg-blue-100 text-blue-800 px-4 py-2 rounded-lg">
                    <strong>üìä T·ªïng s·ªë ca ƒëƒÉng k√Ω hi·∫øn m√°u:</strong> {filtered.length}
                </div>
                <div className="bg-green-100 text-green-800 px-4 py-2 rounded-lg">
                    <strong>‚úÖ ƒê√£ ghi nh·∫≠n:</strong> {filtered.filter(item => hasVolume(item)).length}
                </div>
                <div className="bg-yellow-100 text-yellow-800 px-4 py-2 rounded-lg">
                    <strong>‚è≥ Ch∆∞a ghi nh·∫≠n:</strong> {filtered.filter(item => !hasVolume(item)).length}
                </div>
            </div>
        </div>
    );
};

export default EditBloodPage;