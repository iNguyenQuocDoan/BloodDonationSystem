import { useState, useEffect } from "react";
import { askGemini } from "./askGemini";
import useApi from "../../hooks/useApi";

export default function GeminiChatbot() {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [userName, setUserName] = useState(""); // Th√™m state l∆∞u t√™n

  const { getCurrentUser } = useApi();
  const [showFAQ, setShowFAQ] = useState(false);
  // L·∫•y t√™n user khi m·ªü chatbot
  useEffect(() => {
    const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
    if (open && isLoggedIn) {
      getCurrentUser()
        .then((user) => {
          setUserName(user?.data?.user_name || "Kh√°ch");
        })
        .catch(() => setUserName("Kh√°ch"));
    }
  }, [open, getCurrentUser, localStorage.getItem("isLoggedIn")]);
  useEffect(() => {
    setOpen(false); // Lu√¥n ƒë√≥ng chatbot khi userName ƒë·ªïi (ƒëƒÉng nh·∫≠p/xu·∫•t)
    setMessages([]);
    setInput("");
  }, [userName]);

  const faqList = [
    {
      question: "L√†m c√°ch n√†o ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n tr√™n h·ªá th·ªëng?",
      answer:
        "B·∫°n nh·∫•p v√†o n√∫t ‚ÄúƒêƒÉng k√Ω‚Äù ·ªü g√≥c tr√™n b√™n ph·∫£i, ƒëi·ªÅn h·ªç t√™n, email, s·ªë ƒëi·ªán tho·∫°i, ƒë·ªãa ch·ªâ, ng√†y sinh, m·∫≠t kh·∫©u r·ªìi b·∫•m ‚ÄúƒêƒÉng k√Ω‚Äù.",
    },
    {
      question: "Ch∆∞a bi·∫øt nh√≥m m√°u c√≥ ƒëƒÉng k√Ω hi·∫øn ƒë∆∞·ª£c kh√¥ng?",
      answer:
        "ƒê∆∞·ª£c. Ch·ªçn ‚ÄúƒêƒÉng k√≠ hi·∫øn m√°u‚Äù, sau ƒë√≥ ra c∆° s·ªü x√©t nghi·ªám mi·ªÖn ph√≠ v√† g·ª≠i k·∫øt qu·∫£ cho nh√¢n vi√™n y t·∫ø x√°c minh.",
    },
    // ...th√™m c√°c c√¢u h·ªèi/ƒë√°p √°n kh√°c t·ª´ FAQ.jsx...
  ];
  const suggestions = [
    "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p",
    "T√¥i thu·ªôc nh√≥m m√°u n√†o?",
    "Nh√≥m m√°u O c√≥ th·ªÉ hi·∫øn cho ai?",
    "Nh√≥m m√°u A nh·∫≠n ƒë∆∞·ª£c t·ª´ nh√≥m n√†o?",
    "Nh√≥m m√°u B n√™n l∆∞u √Ω g√¨ khi hi·∫øn m√°u?",
    "Nh√≥m m√°u AB c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
    "T∆∞ v·∫•n ch·ªçn nh√≥m m√°u ph√π h·ª£p ƒë·ªÉ hi·∫øn t·∫∑ng",
    "L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω hi·∫øn m√°u?",
    "T√¥i c·∫ßn chu·∫©n b·ªã g√¨ tr∆∞·ªõc khi hi·∫øn m√°u?",
    "Ai kh√¥ng n√™n hi·∫øn m√°u?",
    "Hi·∫øn m√°u c√≥ l·ª£i √≠ch g√¨?",
    "Sau khi hi·∫øn m√°u n√™n l√†m g√¨?",
  ];

  // G·ª≠i c√¢u h·ªèi (t·ª´ input ho·∫∑c g·ª£i √Ω)
  const handleSend = async (customInput, isFAQ = false) => {
    const question = typeof customInput === "string" ? customInput : input;
    if (!question.trim()) return;

    // N·∫øu l√† "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p" th√¨ ch·ªâ hi·ªán danh s√°ch, kh√¥ng g·ª≠i l√™n chat
    if (question.trim() === "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p") {
      setShowFAQ(true);
      return;
    }

    setMessages([...messages, { from: "user", text: question }]);
    setInput("");
    setLoading(true);

    // N·∫øu l√† c√¢u h·ªèi FAQ th√¨ tr·∫£ l·ªùi ƒë√∫ng ƒë√°p √°n
    if (isFAQ) {
      const faq = faqList.find((f) => f.question === question.trim());
      if (faq) {
        setMessages((msgs) => [...msgs, { from: "bot", text: faq.answer }]);
        setLoading(false);
        return;
      }
    }

    // N·∫øu l√† c√¢u h·ªèi nh√≥m m√°u th√¨ l·∫•y t·ª´ API user
    if (question.trim() === "T√¥i thu·ªôc nh√≥m m√°u n√†o?") {
      try {
        const user = await getCurrentUser();
        const bloodType = user?.data?.blood_group || "Ch∆∞a c·∫≠p nh·∫≠t nh√≥m m√°u";
        setMessages((msgs) => [
          ...msgs,
          { from: "bot", text: `Nh√≥m m√°u c·ªßa b·∫°n l√†: ${bloodType}` },
        ]);
      } catch {
        setMessages((msgs) => [
          ...msgs,
          { from: "bot", text: "Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin nh√≥m m√°u c·ªßa b·∫°n." },
        ]);
      }
      setLoading(false);
      return;
    }

    // C√°c c√¢u h·ªèi kh√°c v·∫´n h·ªèi Gemini
    const reply = await askGemini(question);
    setMessages((msgs) => [...msgs, { from: "bot", text: reply }]);
    setLoading(false);
  };

  // Icon button style
  const iconBtnStyle = {
    position: "fixed",
    bottom: 80, // ƒê·ªìng b·ªô v·ªõi v·ªã tr√≠ trong Footer
    right: 20, // ƒê·ªìng b·ªô v·ªõi v·ªã tr√≠ trong Footer
    zIndex: 1000,
    background: "#D32F2F",
    color: "#fff",
    borderRadius: "50%",
    width: 56,
    height: 56,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    boxShadow: "0 2px 8px #0002",
    cursor: "pointer",
    fontSize: 28,
    border: "none",
  };

  // Avatar
  const botAvatar = "https://cdn-icons-png.flaticon.com/512/4712/4712035.png";
  const userAvatar = "https://cdn-icons-png.flaticon.com/512/1946/1946429.png";

  return (
    <>
      {!open && (
        <button
          style={iconBtnStyle}
          onClick={() => setOpen(true)}
          title="Chatbot DaiVietBlood - H·ªó tr·ª£ t∆∞ v·∫•n hi·∫øn m√°u, t√¨m hi·ªÉu nh√≥m m√°u v√† gi·∫£i ƒë√°p th·∫Øc m·∫Øc 24/7"
        >
          <span role="img" aria-label="chat">
            üí¨
          </span>
        </button>
      )}
      {open && (
        <div
          style={{
            position: "fixed",
            bottom: 144, // TƒÉng t·ª´ bottom c·ªßa icon (80) + margin
            right: 20, // ƒê·ªìng b·ªô v·ªõi v·ªã tr√≠ trong Footer
            width: 370,
            background: "#fff",
            borderRadius: 12,
            boxShadow: "0 2px 16px #0003",
            padding: 0,
            zIndex: 1000,
            overflow: "hidden",
          }}
        >
          {/* Header */}
          <div
            style={{
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
              background: "#D32F2F",
              padding: "12px 16px",
            }}
          >
            <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
              <img
                src={botAvatar}
                alt="bot"
                style={{ width: 32, height: 32, borderRadius: "50%" }}
              />
              <div>
                <div
                  style={{ color: "#fff", fontWeight: "bold", fontSize: 18 }}
                >
                  DaiVietBlood Chatbot
                </div>
                <div style={{ color: "#fff9", fontSize: 12 }}>
                  Xin ch√†o, <b>{userName}</b>! H·ªó tr·ª£ th√¥ng tin hi·∫øn m√°u 24/7
                </div>
              </div>
            </div>
            <button
              onClick={() => setOpen(false)}
              style={{
                background: "none",
                border: "none",
                fontSize: 22,
                color: "#fff",
                cursor: "pointer",
              }}
              title="ƒê√≥ng"
            >
              √ó
            </button>
          </div>
          {/* N·ªôi dung chat */}
          <div
            style={{
              height: 220,
              overflowY: "auto",
              background: "#f9f9f9",
              padding: 12,
              display: "flex",
              flexDirection: "column",
              gap: 8,
            }}
          >
            {messages.map((msg, i) => (
              <div
                key={i}
                style={{
                  display: "flex",
                  flexDirection: msg.from === "user" ? "row-reverse" : "row",
                  alignItems: "flex-end",
                  gap: 8,
                }}
              >
                <img
                  src={msg.from === "user" ? userAvatar : botAvatar}
                  alt={msg.from}
                  style={{
                    width: 28,
                    height: 28,
                    borderRadius: "50%",
                    background: "#fff",
                  }}
                />
                <div
                  style={{
                    background: msg.from === "user" ? "#e3f2fd" : "#ffebee",
                    color: msg.from === "user" ? "#1976d2" : "#d32f2f",
                    borderRadius: 16,
                    padding: "8px 14px",
                    maxWidth: 220,
                    fontSize: 15,
                    boxShadow: "0 1px 2px #0001",
                  }}
                >
                  {msg.text}
                </div>
              </div>
            ))}
            {loading && (
              <div
                style={{ color: "#888", fontStyle: "italic", marginLeft: 36 }}
              >
                ƒêang tr·∫£ l·ªùi...
              </div>
            )}
          </div>
          {/* G·ª£i √Ω c√¢u h·ªèi */}
          <div
            style={{
              display: "flex",
              gap: 8,
              overflowX: "auto",
              padding: "8px 12px",
              background: "#fff",
            }}
          >
            {suggestions.map((s, idx) => (
              <button
                key={idx}
                style={{
                  background: "#fff",
                  border: "1px solid #ffd6d6",
                  borderRadius: 20,
                  padding: "4px 14px",
                  fontSize: 14,
                  color: "#d32f2f",
                  cursor: "pointer",
                  whiteSpace: "nowrap",
                  boxShadow: "0 1px 2px #0001",
                }}
                disabled={loading}
                onClick={() => handleSend(s)}
              >
                {s}
              </button>
            ))}
          </div>
          {/* Input */}
          <div
            style={{
              display: "flex",
              gap: 8,
              padding: "10px 12px",
              background: "#fff",
              borderTop: "1px solid #f1f1f1",
            }}
          >
            <input
              style={{
                flex: 1,
                borderRadius: 20,
                border: "1px solid #ccc",
                padding: "8px 14px",
                fontSize: 15,
                outline: "none",
              }}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
              placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ hi·∫øn m√°u..."
              disabled={loading}
            />
            <button
              style={{
                background: "#D32F2F",
                color: "#fff",
                border: "none",
                borderRadius: "50%",
                width: 40,
                height: 40,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: 18,
              }}
              onClick={() => handleSend()}
              disabled={loading}
              title="G·ª≠i"
            >
              <span role="img" aria-label="send">
                üì§
              </span>
            </button>
          </div>
          {/* FAQ List */}
          {showFAQ && (
            <div
              style={{
                background: "#fff",
                border: "1px solid #ffd6d6",
                borderRadius: 12,
                margin: "8px 16px",
                padding: "8px 16px",
                boxShadow: "0 2px 8px #0001",
                display: "flex",
                flexDirection: "column",
                gap: 8,
              }}
            >
              {faqList.map((q, idx) => (
                <button
                  key={idx}
                  style={{
                    width: "100%",
                    background: "#ffe6ea",
                    color: "#d32f2f",
                    border: "none",
                    borderRadius: 20,
                    padding: "12px 0",
                    fontWeight: "bold",
                    fontSize: 15,
                    cursor: "pointer",
                    transition: "background 0.2s",
                  }}
                  onClick={() => {
                    handleSend(q.question, true);
                    setShowFAQ(false);
                  }}
                >
                  {q.question}
                </button>
              ))}
              <button
                style={{
                  width: "100%",
                  background: "#fff",
                  color: "#888",
                  border: "1px solid #ffd6d6",
                  borderRadius: 20,
                  padding: "10px 0",
                  fontWeight: "bold",
                  fontSize: 15,
                  cursor: "pointer",
                  marginTop: 4,
                }}
                onClick={() => setShowFAQ(false)}
              >
                ƒê√≥ng
              </button>
            </div>
          )}
        </div>
      )}
    </>
  );
}
