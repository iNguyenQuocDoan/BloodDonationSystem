import { useState, useEffect, useRef } from "react";
import { askGemini } from "./askGemini";
import useApi from "../../hooks/useApi";

export default function GeminiChatbot() {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [userName, setUserName] = useState(""); // Th√™m state l∆∞u t√™n
  const chatContentRef = useRef(null); // Ref cho ph·∫ßn chat content
  // eslint-disable-next-line no-unused-vars
  const [typingMessageId, setTypingMessageId] = useState(null); // ID c·ªßa tin nh·∫Øn ƒëang typing

  const { getCurrentUser } = useApi();
  const [showFAQ, setShowFAQ] = useState(false);

  // Component TypewriterText
  const TypewriterText = ({ text, onComplete, messageId }) => {
    const [displayText, setDisplayText] = useState("");
    const [currentIndex, setCurrentIndex] = useState(0);

    useEffect(() => {
      if (currentIndex < text.length) {
        const timer = setTimeout(() => {
          setDisplayText(text.slice(0, currentIndex + 1));
          setCurrentIndex(currentIndex + 1);
          // Auto scroll m·ªói 10 k√Ω t·ª± ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n th·∫•y text ƒëang typing
          if (currentIndex > 0 && currentIndex % 10 === 0) {
            setTimeout(scrollToBottom, 10);
          }
        }, 30); // T·ªëc ƒë·ªô typing (30ms m·ªói k√Ω t·ª±)
        return () => clearTimeout(timer);
      } else {
        // Ho√†n th√†nh typing
        if (onComplete) onComplete(messageId);
      }
    }, [currentIndex, text, onComplete, messageId]);

    return <span>{displayText}</span>;
  };
  // L·∫•y t√™n user khi m·ªü chatbot
  useEffect(() => {
    const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
    if (open && isLoggedIn) {
      getCurrentUser()
        .then((user) => {
          setUserName(user?.data?.user_name || "Kh√°ch");
        })
        .catch(() => setUserName("Kh√°ch"));
    }
  }, [open, getCurrentUser]); // Removed localStorage.getItem from dependency
  useEffect(() => {
    setOpen(false); // Lu√¥n ƒë√≥ng chatbot khi userName ƒë·ªïi (ƒëƒÉng nh·∫≠p/xu·∫•t)
    setMessages([]);
    setInput("");
  }, [userName]);

  const faqList = [
    {
      question: "L√†m c√°ch n√†o ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n tr√™n h·ªá th·ªëng?",
      answer:
        "B·∫°n nh·∫•p v√†o n√∫t ‚ÄúƒêƒÉng k√Ω‚Äù ·ªü g√≥c tr√™n b√™n ph·∫£i, ƒëi·ªÅn h·ªç t√™n, email, s·ªë ƒëi·ªán tho·∫°i, ƒë·ªãa ch·ªâ, ng√†y sinh, m·∫≠t kh·∫©u r·ªìi b·∫•m ‚ÄúƒêƒÉng k√Ω‚Äù.",
    },
    {
      question: "Ch∆∞a bi·∫øt nh√≥m m√°u c√≥ ƒëƒÉng k√Ω hi·∫øn ƒë∆∞·ª£c kh√¥ng?",
      answer:
        "ƒê∆∞·ª£c. Ch·ªçn ‚ÄúƒêƒÉng k√≠ hi·∫øn m√°u‚Äù, sau ƒë√≥ ra c∆° s·ªü x√©t nghi·ªám mi·ªÖn ph√≠ v√† g·ª≠i k·∫øt qu·∫£ cho nh√¢n vi√™n y t·∫ø x√°c minh.",
    },
    // ...th√™m c√°c c√¢u h·ªèi/ƒë√°p √°n kh√°c t·ª´ FAQ.jsx...
  ];
  const suggestions = [
    "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p",
    "T√¥i thu·ªôc nh√≥m m√°u n√†o?",
    "Nh√≥m m√°u O c√≥ th·ªÉ hi·∫øn cho ai?",
    "Nh√≥m m√°u A nh·∫≠n ƒë∆∞·ª£c t·ª´ nh√≥m n√†o?",
    "Nh√≥m m√°u B n√™n l∆∞u √Ω g√¨ khi hi·∫øn m√°u?",
    "Nh√≥m m√°u AB c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
    "T∆∞ v·∫•n ch·ªçn nh√≥m m√°u ph√π h·ª£p ƒë·ªÉ hi·∫øn t·∫∑ng",
    "L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω hi·∫øn m√°u?",
    "T√¥i c·∫ßn chu·∫©n b·ªã g√¨ tr∆∞·ªõc khi hi·∫øn m√°u?",
    "Ai kh√¥ng n√™n hi·∫øn m√°u?",
    "Hi·∫øn m√°u c√≥ l·ª£i √≠ch g√¨?",
    "Sau khi hi·∫øn m√°u n√™n l√†m g√¨?",
  ];

  // H√†m scroll xu·ªëng d∆∞·ªõi v·ªõi hi·ªáu ·ª©ng m∆∞·ª£t
  const scrollToBottom = () => {
    if (chatContentRef.current) {
      chatContentRef.current.scrollTo({
        top: chatContentRef.current.scrollHeight,
        behavior: "smooth",
      });
    }
  };

  // Auto scroll khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (messages.length > 0) {
      setTimeout(scrollToBottom, 100); // Delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ render
    }
  }, [messages]);

  // H√†m th√™m tin nh·∫Øn bot v·ªõi typing effect
  const addBotMessage = (text) => {
    const messageId = Date.now().toString();
    setMessages((msgs) => [
      ...msgs,
      {
        from: "bot",
        text: text,
        id: messageId,
        isTyping: true,
      },
    ]);
    setTypingMessageId(messageId);
    setLoading(false);
    // Auto scroll ngay khi bot b·∫Øt ƒë·∫ßu ph·∫£n h·ªìi
    setTimeout(scrollToBottom, 100);
  };

  // H√†m ho√†n th√†nh typing
  const handleTypingComplete = (messageId) => {
    setMessages((msgs) =>
      msgs.map((msg) =>
        msg.id === messageId ? { ...msg, isTyping: false } : msg
      )
    );
    setTypingMessageId(null);
    // Auto scroll khi typing ho√†n th√†nh
    setTimeout(scrollToBottom, 100);
  };

  // G·ª≠i c√¢u h·ªèi (t·ª´ input ho·∫∑c g·ª£i √Ω)
  const handleSend = async (customInput, isFAQ = false) => {
    const question = typeof customInput === "string" ? customInput : input;
    if (!question.trim()) return;

    // N·∫øu l√† "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p" th√¨ toggle hi·ªÉn th·ªã danh s√°ch, kh√¥ng g·ª≠i l√™n chat
    if (question.trim() === "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p") {
      setShowFAQ(!showFAQ); // Toggle thay v√¨ ch·ªâ set true
      return;
    }

    setMessages([
      ...messages,
      { from: "user", text: question, id: Date.now().toString() },
    ]);
    setInput("");
    setLoading(true);

    // Scroll ngay khi g·ª≠i c√¢u h·ªèi
    setTimeout(scrollToBottom, 100);

    // N·∫øu l√† c√¢u h·ªèi FAQ th√¨ tr·∫£ l·ªùi ƒë√∫ng ƒë√°p √°n
    if (isFAQ) {
      const faq = faqList.find((f) => f.question === question.trim());
      if (faq) {
        addBotMessage(faq.answer);
        return;
      }
    }

    // N·∫øu l√† c√¢u h·ªèi nh√≥m m√°u th√¨ l·∫•y t·ª´ API user
    if (question.trim() === "T√¥i thu·ªôc nh√≥m m√°u n√†o?") {
      try {
        const user = await getCurrentUser();
        const bloodType = user?.data?.blood_group || "Ch∆∞a c·∫≠p nh·∫≠t nh√≥m m√°u";
        addBotMessage(`Nh√≥m m√°u c·ªßa b·∫°n l√†: ${bloodType}`);
      } catch {
        addBotMessage("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin nh√≥m m√°u c·ªßa b·∫°n.");
      }
      return;
    }

    // C√°c c√¢u h·ªèi kh√°c v·∫´n h·ªèi Gemini
    const reply = await askGemini(question);
    addBotMessage(reply);
  };

  // Icon button style
  const iconBtnStyle = {
    position: "fixed",
    bottom: 80,
    right: 20,
    zIndex: 1001, // TƒÉng z-index
    background: "#D32F2F",
    color: "#fff",
    borderRadius: "50%",
    width: 56,
    height: 56,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    boxShadow: "0 2px 8px #0002",
    cursor: "pointer",
    fontSize: 28,
    border: "none",
  };

  // Avatar
  const botAvatar = "https://cdn-icons-png.flaticon.com/512/4712/4712035.png";
  const userAvatar = "https://cdn-icons-png.flaticon.com/512/1946/1946429.png";

  return (
    <>
      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
          
          @keyframes typing-dot {
            0%, 60%, 100% {
              transform: translateY(0);
              opacity: 0.4;
            }
            30% {
              transform: translateY(-10px);
              opacity: 1;
            }
          }
          
          /* Hide scrollbar */
          .chat-suggestions::-webkit-scrollbar {
            display: none;
          }
        `}
      </style>
      {!open && (
        <button
          style={iconBtnStyle}
          onClick={() => setOpen(true)}
          title="Chatbot DaiVietBlood - H·ªó tr·ª£ t∆∞ v·∫•n hi·∫øn m√°u, t√¨m hi·ªÉu nh√≥m m√°u v√† gi·∫£i ƒë√°p th·∫Øc m·∫Øc 24/7"
        >
          <span role="img" aria-label="chat">
            üí¨
          </span>
        </button>
      )}
      {open && (
        <div
          style={{
            position: "fixed",
            bottom: 144,
            right: 20,
            width: "min(450px, calc(100vw - 40px))", // TƒÉng width ƒë·ªÉ n·∫±m ngang h∆°n
            maxHeight: "400px", // Gi·∫£m height ƒë·ªÉ kh√¥ng chi·∫øm qu√° nhi·ªÅu m√†n h√¨nh
            background: "#fff",
            borderRadius: 16, // Bo tr√≤n nhi·ªÅu h∆°n
            boxShadow: "0 8px 32px rgba(0,0,0,0.15)", // Shadow ƒë·∫πp h∆°n
            padding: 0,
            zIndex: 1001,
            overflow: "hidden",
            display: "flex",
            flexDirection: "column",
            border: "1px solid #f0f0f0",
          }}
        >
          {/* Header */}
          <div
            style={{
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
              background: "linear-gradient(135deg, #D32F2F 0%, #B71C1C 100%)",
              padding: "14px 20px",
              borderRadius: "16px 16px 0 0",
            }}
          >
            <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
              <img
                src={botAvatar}
                alt="bot"
                style={{ width: 32, height: 32, borderRadius: "50%" }}
              />
              <div>
                <div style={{ color: "#fff", fontWeight: "600", fontSize: 16 }}>
                  ü©∏ DaiVietBlood Assistant
                </div>
                <div style={{ color: "#fff", fontSize: 11, opacity: 0.9 }}>
                  Xin ch√†o <b>{userName || "B·∫°n"}</b>! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho
                  b·∫°n?
                </div>
              </div>
            </div>
            <button
              onClick={() => setOpen(false)}
              style={{
                background: "rgba(255,255,255,0.2)",
                border: "none",
                borderRadius: "50%",
                width: 28,
                height: 28,
                fontSize: 16,
                color: "#fff",
                cursor: "pointer",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                transition: "all 0.2s ease",
              }}
              title="ƒê√≥ng chatbot"
              onMouseEnter={(e) =>
                (e.target.style.background = "rgba(255,255,255,0.3)")
              }
              onMouseLeave={(e) =>
                (e.target.style.background = "rgba(255,255,255,0.2)")
              }
            >
              √ó
            </button>
          </div>
          {/* N·ªôi dung chat */}
          <div
            ref={chatContentRef}
            style={{
              height: 180, // Gi·∫£m height ƒë·ªÉ compact h∆°n
              overflowY: "auto",
              background: "#fafafa",
              padding: "16px",
              display: "flex",
              flexDirection: "column",
              gap: 12,
              flex: "1 1 auto",
              scrollBehavior: "smooth",
            }}
          >
            {messages.map((msg, i) => (
              <div
                key={msg.id || i}
                style={{
                  display: "flex",
                  flexDirection: msg.from === "user" ? "row-reverse" : "row",
                  alignItems: "flex-end",
                  gap: 8,
                }}
              >
                <img
                  src={msg.from === "user" ? userAvatar : botAvatar}
                  alt={msg.from}
                  style={{
                    width: 32,
                    height: 32,
                    borderRadius: "50%",
                    background: "#fff",
                    border: "2px solid #f0f0f0",
                  }}
                />
                <div
                  style={{
                    background:
                      msg.from === "user"
                        ? "linear-gradient(135deg, #2196F3 0%, #1976D2 100%)"
                        : "#fff",
                    color: msg.from === "user" ? "#fff" : "#333",
                    borderRadius: 18,
                    padding: "10px 16px",
                    maxWidth: "75%",
                    fontSize: 14,
                    lineHeight: "1.4",
                    boxShadow:
                      msg.from === "user"
                        ? "0 2px 8px rgba(33, 150, 243, 0.3)"
                        : "0 2px 8px rgba(0,0,0,0.1)",
                    wordWrap: "break-word",
                    border: msg.from === "bot" ? "1px solid #f0f0f0" : "none",
                  }}
                >
                  {msg.from === "bot" && msg.isTyping ? (
                    <TypewriterText
                      text={msg.text}
                      onComplete={handleTypingComplete}
                      messageId={msg.id}
                    />
                  ) : (
                    msg.text
                  )}
                </div>
              </div>
            ))}
            {loading && (
              <div
                style={{
                  display: "flex",
                  alignItems: "flex-end",
                  gap: 8,
                  marginLeft: 0,
                }}
              >
                <img
                  src={botAvatar}
                  alt="bot"
                  style={{
                    width: 32,
                    height: 32,
                    borderRadius: "50%",
                    background: "#fff",
                    border: "2px solid #f0f0f0",
                  }}
                />
                <div
                  style={{
                    background: "#fff",
                    borderRadius: 18,
                    padding: "10px 16px",
                    boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                    border: "1px solid #f0f0f0",
                    display: "flex",
                    alignItems: "center",
                    gap: 8,
                  }}
                >
                  <span style={{ fontSize: 13, color: "#666" }}>
                    ƒêang suy nghƒ©
                  </span>
                  <div
                    style={{
                      display: "flex",
                      gap: 3,
                    }}
                  >
                    <div
                      style={{
                        width: 6,
                        height: 6,
                        borderRadius: "50%",
                        backgroundColor: "#D32F2F",
                        animation: "typing-dot 1.4s infinite ease-in-out",
                      }}
                    ></div>
                    <div
                      style={{
                        width: 6,
                        height: 6,
                        borderRadius: "50%",
                        backgroundColor: "#D32F2F",
                        animation: "typing-dot 1.4s infinite ease-in-out 0.2s",
                      }}
                    ></div>
                    <div
                      style={{
                        width: 6,
                        height: 6,
                        borderRadius: "50%",
                        backgroundColor: "#D32F2F",
                        animation: "typing-dot 1.4s infinite ease-in-out 0.4s",
                      }}
                    ></div>
                  </div>
                </div>
              </div>
            )}
          </div>
          {/* G·ª£i √Ω c√¢u h·ªèi - L√†m ngang h∆°n */}
          <div
            className="chat-suggestions"
            style={{
              display: "flex",
              gap: 8,
              overflowX: "auto",
              padding: "12px 16px",
              background: "#fff",
              flex: "0 0 auto",
              scrollbarWidth: "none", // Firefox
              msOverflowStyle: "none", // IE/Edge
            }}
          >
            {suggestions.slice(0, 6).map(
              (
                s,
                idx // Ch·ªâ hi·ªÉn th·ªã 6 suggestion ƒë·∫ßu
              ) => (
                <button
                  key={idx}
                  style={{
                    background:
                      s === "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p" && showFAQ
                        ? "linear-gradient(135deg, #D32F2F 0%, #B71C1C 100%)"
                        : "linear-gradient(135deg, #fff 0%, #f8f9fa 100%)",
                    border:
                      s === "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p" && showFAQ
                        ? "1px solid #D32F2F"
                        : "1px solid #e9ecef",
                    borderRadius: 20,
                    padding: "8px 16px",
                    fontSize: 13,
                    color:
                      s === "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p" && showFAQ
                        ? "#fff"
                        : "#495057",
                    cursor: "pointer",
                    whiteSpace: "nowrap",
                    boxShadow:
                      s === "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p" && showFAQ
                        ? "0 2px 8px rgba(211, 47, 47, 0.3)"
                        : "0 2px 4px rgba(0,0,0,0.05)",
                    transition: "all 0.2s ease",
                    fontWeight: "500",
                  }}
                  disabled={loading}
                  onClick={() => handleSend(s)}
                >
                  {s}
                </button>
              )
            )}
          </div>

          {/* FAQ List */}
          {showFAQ && (
            <div
              style={{
                background: "#fff",
                border: "1px solid #ffd6d6",
                borderRadius: 12,
                margin: "8px 12px",
                padding: "8px 16px",
                boxShadow: "0 2px 8px #0001",
                display: "flex",
                flexDirection: "column",
                gap: 8,
                maxHeight: "150px",
                overflowY: "auto",
                flex: "0 0 auto",
              }}
            >
              {faqList.map((q, idx) => (
                <button
                  key={idx}
                  style={{
                    width: "100%",
                    background: "#ffe6ea",
                    color: "#d32f2f",
                    border: "none",
                    borderRadius: 20,
                    padding: "12px 0",
                    fontWeight: "bold",
                    fontSize: 15,
                    cursor: "pointer",
                    transition: "background 0.2s",
                  }}
                  onClick={() => {
                    handleSend(q.question, true);
                    setShowFAQ(false);
                  }}
                >
                  {q.question}
                </button>
              ))}
              <button
                style={{
                  width: "100%",
                  background: "#fff",
                  color: "#888",
                  border: "1px solid #ffd6d6",
                  borderRadius: 20,
                  padding: "10px 0",
                  fontWeight: "bold",
                  fontSize: 15,
                  cursor: "pointer",
                  marginTop: 4,
                }}
                onClick={() => setShowFAQ(false)}
              >
                ƒê√≥ng
              </button>
            </div>
          )}

          {/* Input */}
          <div
            style={{
              display: "flex",
              gap: 12,
              padding: "12px 16px",
              background: "#fff",
              borderTop: "1px solid #f0f0f0",
              flex: "0 0 auto",
              borderRadius: "0 0 16px 16px",
            }}
          >
            <input
              style={{
                flex: 1,
                borderRadius: 24,
                border: "1px solid #e9ecef",
                padding: "10px 16px",
                fontSize: 14,
                outline: "none",
                background: "#f8f9fa",
                transition: "all 0.2s ease",
              }}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
              placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ hi·∫øn m√°u..."
              disabled={loading}
              onFocus={(e) => {
                e.target.style.borderColor = "#D32F2F";
                e.target.style.background = "#fff";
              }}
              onBlur={(e) => {
                e.target.style.borderColor = "#e9ecef";
                e.target.style.background = "#f8f9fa";
              }}
            />
            <button
              style={{
                background: "linear-gradient(135deg, #D32F2F 0%, #B71C1C 100%)",
                color: "#fff",
                border: "none",
                borderRadius: "50%",
                width: 44,
                height: 44,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: 16,
                cursor: loading ? "not-allowed" : "pointer",
                boxShadow: "0 2px 8px rgba(211, 47, 47, 0.3)",
                transition: "all 0.2s ease",
                opacity: loading ? 0.7 : 1,
              }}
              onClick={() => handleSend()}
              disabled={loading}
              title="G·ª≠i tin nh·∫Øn"
              onMouseEnter={(e) =>
                !loading && (e.target.style.transform = "scale(1.05)")
              }
              onMouseLeave={(e) => (e.target.style.transform = "scale(1)")}
            >
              <span role="img" aria-label="send">
                ‚úàÔ∏è
              </span>
            </button>
          </div>
        </div>
      )}
    </>
  );
}
