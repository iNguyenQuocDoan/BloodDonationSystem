import { useState, useEffect, useRef, useCallback } from "react";
import { askGemini } from "./askGemini";
import useApi from "../../hooks/useApi";
import TypewriterText from "./TypewriterText";
import "./Chatbot.css";
import { useLocation } from "react-router-dom";

// Helper function ƒë·ªÉ ki·ªÉm tra xem c√≥ ph·∫£i trang auth kh√¥ng
const isAuthRoute = (pathname) => {
  const authRoutes = [
    "/login",
    "/register",
    "/forgot-password",
    "/profile",
    "/auth/",
  ];
  return authRoutes.some((route) => pathname.includes(route));
};

export default function GeminiChatbot() {
  const location = useLocation();
  const isAuthPage = isAuthRoute(location.pathname);

  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [userName, setUserName] = useState(""); // Th√™m state l∆∞u t√™n
  const chatContentRef = useRef(null); // Ref cho ph·∫ßn chat content
  // eslint-disable-next-line no-unused-vars
  const [typingMessageId, setTypingMessageId] = useState(null); // ID c·ªßa tin nh·∫Øn ƒëang typing
  const [isTyping, setIsTyping] = useState(false); // State ƒë·ªÉ theo d√µi typing
  const [shouldStopTyping, setShouldStopTyping] = useState(false); // State ƒë·ªÉ d·ª´ng typing
  const [isExpanded, setIsExpanded] = useState(false); // State ƒë·ªÉ ph√≥ng to chatbot
  const typingTimeoutRef = useRef(null); // Ref ƒë·ªÉ l∆∞u timeout ID
  const { getCurrentUser } = useApi();
  const [showFAQ, setShowFAQ] = useState(false);
  const [isUserScrolling, setIsUserScrolling] = useState(false); // State ph√°t hi·ªán ng∆∞·ªùi d√πng k√©o
  const [autoScrollLocked, setAutoScrollLocked] = useState(false); // Kh√≥a auto scroll khi user k√©o l√™n

  // Dispatch custom event khi chatbot m·ªü/ƒë√≥ng ƒë·ªÉ ·∫©n/hi·ªán n√∫t scroll to top
  useEffect(() => {
    const event = new CustomEvent("chatbotToggle", {
      detail: { isOpen: open },
    });
    window.dispatchEvent(event);
  }, [open]);

  // Component ƒë·ªÉ format text ƒë·∫πp h∆°n
  const FormattedText = ({ text }) => {
    // T√°ch text th√†nh c√°c ƒëo·∫°n v√† format
    const formatText = (rawText) => {
      if (!rawText) return rawText;

      // T√°ch theo d·∫•u xu·ªëng d√≤ng ho·∫∑c d·∫•u ch·∫•m k·∫øt th√∫c c√¢u
      let formatted = rawText
        // X·ª≠ l√Ω c√°c k√Ω hi·ªáu ƒë·∫∑c bi·ªát tr∆∞·ªõc (ƒë·ªÉ tr√°nh conflict)
        .replace(/\*\*\*/g, "\n")
        .replace(/\*\*/g, "")
        // Ch·ªâ thay th·∫ø * th√†nh bullet n·∫øu n√≥ ·ªü ƒë·∫ßu d√≤ng ho·∫∑c sau kho·∫£ng tr·∫Øng
        .replace(/(^|\s)\*\s/gm, "$1‚Ä¢ ")
        // Th√™m xu·ªëng d√≤ng sau d·∫•u ch·∫•m n·∫øu theo sau l√† ch·ªØ hoa
        .replace(
          /\. ([A-Z√Ä√Å√Ç√É√à√â√ä√å√ç√í√ì√î√ï√ô√öƒÇƒêƒ®≈®∆†∆ØƒÇ√Ç√ä√î∆†∆Ø·∫Æ·∫∞·∫≤·∫¥·∫∂·∫§·∫¶·∫®·∫™·∫¨√â√à·∫∫·∫º·∫∏√ç√å·ªàƒ®·ªä√ì√í·ªé√ï·ªå·ªê·ªí·ªî·ªñ·ªò·ªö·ªú·ªû·ª†·ª¢√ö√ô·ª¶≈®·ª§·ª®·ª™·ª¨·ªÆ·ª∞√ù·ª≤·ª∂·ª∏·ª¥])/g,
          ".\n$1"
        )
        // Th√™m xu·ªëng d√≤ng tr∆∞·ªõc c√°c d·∫•u hi·ªáu li·ªát k√™
        .replace(/(\d+\.|‚Ä¢|-|\+)\s/g, "\n$1 ")
        // Th√™m xu·ªëng d√≤ng sau d·∫•u hai ch·∫•m n·∫øu theo sau l√† ch·ªØ hoa
        .replace(
          /: ([A-Z√Ä√Å√Ç√É√à√â√ä√å√ç√í√ì√î√ï√ô√öƒÇƒêƒ®≈®∆†∆ØƒÇ√Ç√ä√î∆†∆Ø·∫Æ·∫∞·∫≤·∫¥·∫∂·∫§·∫¶·∫®·∫™·∫¨√â√à·∫∫·∫º·∫∏√ç√å·ªàƒ®·ªä√ì√í·ªé√ï·ªå·ªê·ªí·ªî·ªñ·ªò·ªö·ªú·ªû·ª†·ª¢√ö√ô·ª¶≈®·ª§·ª®·ª™·ª¨·ªÆ·ª∞√ù·ª≤·ª∂·ª∏·ª¥])/g,
          ":\n$1"
        )
        // Th√™m xu·ªëng d√≤ng tr∆∞·ªõc c√°c t·ª´ kh√≥a quan tr·ªçng
        .replace(/(L∆∞u √Ω|Ch√∫ √Ω|Quan tr·ªçng|C·∫ßn thi·∫øt|Khuy·∫øn c√°o):/gi, "\n$1:")
        // Lo·∫°i b·ªè d·∫•u ch·∫•m th·ª´a sau d·∫•u hai ch·∫•m
        .replace(/:\.(\s|$)/g, ":$1")
        // Lo·∫°i b·ªè nhi·ªÅu xu·ªëng d√≤ng li√™n ti·∫øp
        .replace(/\n\s*\n\s*\n/g, "\n\n")
        .trim();

      return formatted;
    };

    const formattedText = formatText(text);

    return (
      <div style={{ whiteSpace: "pre-line", lineHeight: "1.6" }}>
        {formattedText.split("\n").map((line, index) => {
          // N·∫øu l√† d√≤ng tr·ªëng th√¨ t·∫°o kho·∫£ng c√°ch
          if (!line.trim()) {
            return <div key={index} style={{ height: "8px" }} />;
          }

          // Ki·ªÉm tra xem c√≥ ph·∫£i l√† ti√™u ƒë·ªÅ kh√¥ng (c√≥ d·∫•u hai ch·∫•m ·ªü cu·ªëi)
          const isTitle = line.trim().endsWith(":") && line.length < 50;

          // Ki·ªÉm tra xem c√≥ ph·∫£i l√† danh s√°ch kh√¥ng
          const isList = /^(‚Ä¢|\d+\.|[a-z]\)|-|\+)\s/.test(line.trim());

          return (
            <div
              key={index}
              style={{
                marginBottom: isTitle ? "8px" : isList ? "4px" : "6px",
                fontWeight: isTitle ? "600" : "normal",
                color: isTitle ? "#D32F2F" : "#333",
                paddingLeft: isList ? "12px" : "0",
                position: "relative",
              }}
            >
              {line}
            </div>
          );
        })}
      </div>
    );
  };

  // L·∫•y t√™n user khi m·ªü chatbot
  useEffect(() => {
    const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
    if (open && isLoggedIn) {
      getCurrentUser()
        .then((user) => {
          setUserName(user?.data?.user_name || "Kh√°ch");
        })
        .catch(() => setUserName("Kh√°ch"));
    }
  }, [open, getCurrentUser]); // Removed localStorage.getItem from dependency
  useEffect(() => {
    setOpen(false); // Lu√¥n ƒë√≥ng chatbot khi userName ƒë·ªïi (ƒëƒÉng nh·∫≠p/xu·∫•t)
    setMessages([]);
    setInput("");
  }, [userName]);

  // C·∫≠p nh·∫≠t title ƒë·ªông cho tab khi chatbot m·ªü/ƒë√≥ng
  useEffect(() => {
    const originalTitle = document.title;

    if (open) {
      if (isTyping) {
        document.title = "‚úçÔ∏è DaiVietBlood AI ƒëang tr·∫£ l·ªùi...";
      } else {
        document.title = "üí¨ DaiVietBlood AI Assistant - ƒêang t∆∞ v·∫•n...";
      }
    } else {
      document.title = originalTitle;
    }

    // Cleanup khi component unmount
    return () => {
      document.title = originalTitle;
    };
  }, [open, isTyping]);

  const faqList = [
    {
      question: "L√†m c√°ch n√†o ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n tr√™n h·ªá th·ªëng?",
      answer:
        "B·∫°n nh·∫•p v√†o n√∫t ‚ÄúƒêƒÉng k√Ω‚Äù ·ªü g√≥c tr√™n b√™n ph·∫£i, ƒëi·ªÅn h·ªç t√™n, email, s·ªë ƒëi·ªán tho·∫°i, ƒë·ªãa ch·ªâ, ng√†y sinh, m·∫≠t kh·∫©u r·ªìi b·∫•m ‚ÄúƒêƒÉng k√Ω‚Äù.",
    },
    {
      question: "Ch∆∞a bi·∫øt nh√≥m m√°u c√≥ ƒëƒÉng k√Ω hi·∫øn ƒë∆∞·ª£c kh√¥ng?",
      answer:
        "ƒê∆∞·ª£c. Ch·ªçn ‚ÄúƒêƒÉng k√≠ hi·∫øn m√°u‚Äù, sau ƒë√≥ ra c∆° s·ªü x√©t nghi·ªám mi·ªÖn ph√≠ v√† g·ª≠i k·∫øt qu·∫£ cho nh√¢n vi√™n y t·∫ø x√°c minh.",
    },
    // ...th√™m c√°c c√¢u h·ªèi/ƒë√°p √°n kh√°c t·ª´ FAQ.jsx...
  ];
  const suggestions = [
    "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p",
    "T√¥i thu·ªôc nh√≥m m√°u n√†o?",
    "Nh√≥m m√°u O c√≥ th·ªÉ hi·∫øn cho ai?",
    "Nh√≥m m√°u A nh·∫≠n ƒë∆∞·ª£c t·ª´ nh√≥m n√†o?",
    "Nh√≥m m√°u B n√™n l∆∞u √Ω g√¨ khi hi·∫øn m√°u?",
    "Nh√≥m m√°u AB c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
    "T∆∞ v·∫•n ch·ªçn nh√≥m m√°u ph√π h·ª£p ƒë·ªÉ hi·∫øn t·∫∑ng",
    "L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω hi·∫øn m√°u?",
    "T√¥i c·∫ßn chu·∫©n b·ªã g√¨ tr∆∞·ªõc khi hi·∫øn m√°u?",
    "Ai kh√¥ng n√™n hi·∫øn m√°u?",
    "Hi·∫øn m√°u c√≥ l·ª£i √≠ch g√¨?",
    "Sau khi hi·∫øn m√°u n√™n l√†m g√¨?",
  ];

  // Th√™m c√°c c√¢u tr·∫£ l·ªùi nhanh cho c√¢u h·ªèi ph·ªï bi·∫øn
  const quickAnswers = {
    "nh√≥m m√°u o c√≥ th·ªÉ hi·∫øn cho ai":
      "Nh√≥m m√°u O c√≥ th·ªÉ hi·∫øn cho: O, A, B, AB (nh√≥m m√°u v·∫°n nƒÉng v·ªÅ hi·∫øn m√°u)",
    "nh√≥m m√°u a nh·∫≠n ƒë∆∞·ª£c t·ª´ nh√≥m n√†o": "Nh√≥m m√°u A nh·∫≠n ƒë∆∞·ª£c t·ª´: A v√† O",
    "nh√≥m m√°u b n√™n l∆∞u √Ω g√¨ khi hi·∫øn m√°u":
      "Nh√≥m m√°u B: C√≥ th·ªÉ hi·∫øn cho B v√† AB, nh·∫≠n t·ª´ B v√† O. L∆∞u √Ω ki·ªÉm tra s·ª©c kh·ªèe tr∆∞·ªõc khi hi·∫øn.",
    "nh√≥m m√°u ab c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨":
      "Nh√≥m m√°u AB: Nh·∫≠n ƒë∆∞·ª£c t·ª´ t·∫•t c·∫£ nh√≥m m√°u (v·∫°n nƒÉng v·ªÅ nh·∫≠n m√°u), ch·ªâ hi·∫øn cho AB.",
    "l√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω hi·∫øn m√°u":
      "ƒêƒÉng k√Ω hi·∫øn m√°u: V√†o trang ch·ªß ‚Üí ƒêƒÉng k√Ω hi·∫øn m√°u ‚Üí ƒêi·ªÅn th√¥ng tin ‚Üí Ch·ªçn ƒë·ªãa ƒëi·ªÉm v√† th·ªùi gian.",
    "t√¥i c·∫ßn chu·∫©n b·ªã g√¨ tr∆∞·ªõc khi hi·∫øn m√°u":
      "Chu·∫©n b·ªã: Ng·ªß ƒë·ªß gi·∫•c, ƒÉn u·ªëng ƒë·∫ßy ƒë·ªß, mang CMND, kh√¥ng u·ªëng r∆∞·ª£u bia 24h tr∆∞·ªõc.",
    "ai kh√¥ng n√™n hi·∫øn m√°u":
      "Kh√¥ng n√™n hi·∫øn: D∆∞·ªõi 18 tu·ªïi, c√¢n n·∫∑ng d∆∞·ªõi 45kg, ƒëang mang thai, c√≥ b·ªánh l√Ω tim m·∫°ch, nhi·ªÖm tr√πng.",
    "hi·∫øn m√°u c√≥ l·ª£i √≠ch g√¨":
      "L·ª£i √≠ch: K√≠ch th√≠ch t·∫°o m√°u m·ªõi, ki·ªÉm tra s·ª©c kh·ªèe mi·ªÖn ph√≠, gi√∫p ƒë·ª° ng∆∞·ªùi kh√≥ khƒÉn, c·∫£m th·∫•y √Ω nghƒ©a.",
    "sau khi hi·∫øn m√°u n√™n l√†m g√¨":
      "Sau hi·∫øn m√°u: Ngh·ªâ ng∆°i 10-15 ph√∫t, u·ªëng nhi·ªÅu n∆∞·ªõc, ƒÉn nh·∫π, tr√°nh g·∫Øng s·ª©c 24h ƒë·∫ßu.",
  };

  // H√†m ki·ªÉm tra v√† tr·∫£ l·ªùi nhanh
  const getQuickAnswer = (question) => {
    const normalizedQuestion = question.toLowerCase().trim();
    for (const [key, answer] of Object.entries(quickAnswers)) {
      if (
        normalizedQuestion.includes(key) ||
        key.includes(normalizedQuestion)
      ) {
        return answer;
      }
    }
    return null;
  };

  // H√†m x·ª≠ l√Ω chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc ngay l·∫≠p t·ª©c
  const handleToggleExpand = (e) => {
    e.preventDefault();
    e.stopPropagation();

    // Hi·ªáu ·ª©ng nh·∫•n ƒë∆°n gi·∫£n cho n√∫t
    const button = e.target.closest("button");
    if (button) {
      button.style.transform = "scale(0.9)";
      button.style.transition = "transform 0.1s ease";
      setTimeout(() => {
        button.style.transform = "";
        button.style.transition = "";
      }, 100);
    }

    // ƒê·ªïi state ngay l·∫≠p t·ª©c - kh√¥ng c√≥ animation
    setIsExpanded(!isExpanded);

    // Scroll ngay sau khi resize
    setTimeout(() => {
      if (chatContentRef.current) {
        chatContentRef.current.scrollTo({
          top: chatContentRef.current.scrollHeight,
          behavior: "smooth",
        });
      }
    }, 50); // Delay nh·ªè ƒë·ªÉ DOM c·∫≠p nh·∫≠t
  };

  // Theo d√µi s·ª± ki·ªán scroll c·ªßa ng∆∞·ªùi d√πng
  useEffect(() => {
    const chatDiv = chatContentRef.current;
    if (!chatDiv) return;
    const handleScroll = () => {
      // N·∫øu ng∆∞·ªùi d√πng ·ªü g·∫ßn cu·ªëi (c√°ch d∆∞·ªõi 40px), m·ªü l·∫°i auto scroll
      if (
        chatDiv.scrollHeight - chatDiv.scrollTop - chatDiv.clientHeight <
        40
      ) {
        setIsUserScrolling(false);
        setAutoScrollLocked(false);
      } else {
        setIsUserScrolling(true);
        setAutoScrollLocked(true); // Kh√≥a auto scroll khi user k√©o l√™n
      }
    };
    chatDiv.addEventListener("scroll", handleScroll);
    return () => chatDiv.removeEventListener("scroll", handleScroll);
  }, [chatContentRef]);

  // H√†m scroll xu·ªëng d∆∞·ªõi v·ªõi hi·ªáu ·ª©ng m∆∞·ª£t, ch·ªâ scroll n·∫øu user kh√¥ng k√©o v√† kh√¥ng b·ªã kh√≥a
  const scrollToBottom = useCallback(
    (immediate = false, force = false) => {
      if (chatContentRef.current) {
        if ((!isUserScrolling && !autoScrollLocked) || force) {
          if (immediate) {
            chatContentRef.current.scrollTop =
              chatContentRef.current.scrollHeight;
          } else {
            chatContentRef.current.scrollTo({
              top: chatContentRef.current.scrollHeight,
              behavior: "smooth",
            });
          }
        }
      }
    },
    [isUserScrolling, autoScrollLocked, chatContentRef]
  );

  // Auto scroll khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (messages.length > 0 && !autoScrollLocked) {
      setTimeout(() => scrollToBottom(false), 100); // Ch·ªâ scroll n·∫øu user kh√¥ng k√©o v√† kh√¥ng b·ªã kh√≥a
    }
  }, [messages, scrollToBottom, autoScrollLocked]);

  // Auto scroll khi ph√≥ng to/thu nh·ªè chatbot - ngay l·∫≠p t·ª©c
  useEffect(() => {
    if (messages.length > 0 && !autoScrollLocked) {
      setTimeout(() => scrollToBottom(false), 100);
    }
  }, [isExpanded, messages, scrollToBottom, autoScrollLocked]);

  // Scroll ƒë·∫∑c bi·ªát khi bot ƒëang typing
  useEffect(() => {
    if (isTyping && !autoScrollLocked) {
      setTimeout(() => scrollToBottom(true), 100);
    }
  }, [isExpanded, isTyping, scrollToBottom, autoScrollLocked]);

  // H√†m th√™m tin nh·∫Øn bot v·ªõi typing effect
  const addBotMessage = (text) => {
    const messageId = Date.now().toString();
    // Th√™m ch√∫ th√≠ch nh·∫Øc g·∫∑p b√°c sƒ© v√†o cu·ªëi m·ªói ph·∫£n h·ªìi bot
    const finalText = `${text}\n\nü§ù L∆∞u √Ω: ƒê·ªÉ ƒë·∫£m b·∫£o an to√†n v√† nh·∫≠n ƒë∆∞·ª£c l·ªùi khuy√™n ph√π h·ª£p nh·∫•t v·ªõi t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa b·∫°n, h√£y g·∫∑p tr·ª±c ti·∫øp b√°c sƒ© ho·∫∑c chuy√™n vi√™n y t·∫ø khi c·∫ßn thi·∫øt nh√©!`;
    setMessages((msgs) => [
      ...msgs,
      {
        from: "bot",
        text: finalText,
        id: messageId,
        isTyping: true,
      },
    ]);
    setTypingMessageId(messageId);
    setIsTyping(true); // B·∫Øt ƒë·∫ßu typing
    setShouldStopTyping(false); // Reset shouldStop flag
    setLoading(false);
    // Ch·ªâ auto scroll n·∫øu kh√¥ng b·ªã kh√≥a
    if (!autoScrollLocked) {
      setTimeout(scrollToBottom, 100);
    }
  };

  // H√†m ho√†n th√†nh typing - s·ª≠ d·ª•ng useCallback ƒë·ªÉ tr√°nh re-render
  const handleTypingComplete = useCallback(
    (messageId) => {
      setMessages((msgs) =>
        msgs.map((msg) =>
          msg.id === messageId ? { ...msg, isTyping: false } : msg
        )
      );
      setTypingMessageId(null);
      setIsTyping(false);
      setShouldStopTyping(false); // Reset shouldStop flag
      // Ch·ªâ auto scroll n·∫øu kh√¥ng b·ªã kh√≥a
      if (!autoScrollLocked) {
        setTimeout(() => scrollToBottom(false), 100);
      }
    },
    [scrollToBottom, autoScrollLocked]
  );

  // H√†m d·ª´ng typing
  const stopTyping = () => {
    setShouldStopTyping(true); // Signal ƒë·ªÉ d·ª´ng typing
    setIsTyping(false);
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
      typingTimeoutRef.current = null;
    }
  };

  // H√†m x√¢y d·ª±ng prompt chu·∫©n h√≥a cho Gemini
  function buildPrompt(messages, userInput) {
    let prompt = `B·∫°n l√† tr·ª£ l√Ω DaiVietBlood AI t∆∞ v·∫•n v·ªÅ hi·∫øn m√°u, nh√≥m m√°u, s·ª©c kh·ªèe. H√£y tr·∫£ l·ªùi NG·∫ÆN G·ªåN, R√ï R√ÄNG, ∆∞u ti√™n t·ªëc ƒë·ªô ph·∫£n h·ªìi nhanh. Lu√¥n d√πng l·ªùi l·∫Ω nh·∫π nh√†ng, vui v·∫ª, nh√¢n vƒÉn, truy·ªÅn c·∫£m h·ª©ng, ƒë·ªông vi√™n ng∆∞·ªùi h·ªèi. N·∫øu kh√¥ng bi·∫øt, h√£y n√≥i r√µ m·ªôt c√°ch t√≠ch c·ª±c.\n`;
    if (messages && messages.length > 0) {
      prompt += "\nL·ªãch s·ª≠ h·ªôi tho·∫°i:";
      messages.forEach((msg) => {
        if (msg.from === "user") prompt += `\nNg∆∞·ªùi d√πng: ${msg.text}`;
        else if (msg.from === "bot") prompt += `\nAI: ${msg.text}`;
      });
    }
    prompt += `\nNg∆∞·ªùi d√πng: ${userInput}\nAI:`;
    return prompt;
  }

  // G·ª≠i c√¢u h·ªèi (t·ª´ input ho·∫∑c g·ª£i √Ω)
  const handleSend = async (customInput, isFAQ = false) => {
    const question = typeof customInput === "string" ? customInput : input;
    if (!question.trim()) return;

    // N·∫øu l√† "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p" th√¨ toggle hi·ªÉn th·ªã danh s√°ch, kh√¥ng g·ª≠i l√™n chat
    if (question.trim() === "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p") {
      setShowFAQ(!showFAQ); // Toggle thay v√¨ ch·ªâ set true
      return;
    }

    setMessages([
      ...messages,
      { from: "user", text: question, id: Date.now().toString() },
    ]);
    setInput("");
    setLoading(true);
    setIsUserScrolling(false); // Reset auto scroll khi g·ª≠i tin nh·∫Øn m·ªõi
    setAutoScrollLocked(false); // M·ªü l·∫°i auto scroll khi g·ª≠i tin nh·∫Øn m·ªõi

    // Scroll ngay khi g·ª≠i c√¢u h·ªèi
    setTimeout(scrollToBottom, 100);

    // N·∫øu l√† c√¢u h·ªèi FAQ th√¨ tr·∫£ l·ªùi ƒë√∫ng ƒë√°p √°n
    if (isFAQ) {
      const faq = faqList.find((f) => f.question === question.trim());
      if (faq) {
        addBotMessage(faq.answer);
        return;
      }
    }

    // N·∫øu l√† c√¢u h·ªèi nh√≥m m√°u th√¨ l·∫•y t·ª´ API user
    if (question.trim() === "T√¥i thu·ªôc nh√≥m m√°u n√†o?") {
      try {
        const user = await getCurrentUser();
        const bloodType = user?.data?.blood_group || "Ch∆∞a c·∫≠p nh·∫≠t nh√≥m m√°u";
        addBotMessage(`Nh√≥m m√°u c·ªßa b·∫°n l√†: ${bloodType}`);
      } catch {
        addBotMessage("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin nh√≥m m√°u c·ªßa b·∫°n.");
      }
      return;
    }

    // Ki·ªÉm tra c√¢u tr·∫£ l·ªùi nhanh tr∆∞·ªõc khi g·ªçi Gemini
    const quickAnswer = getQuickAnswer(question);
    if (quickAnswer) {
      addBotMessage(quickAnswer);
      return;
    }

    // C√°c c√¢u h·ªèi kh√°c g·ªçi Gemini v·ªõi l·ªãch s·ª≠ h·ªôi tho·∫°i
    try {
      // X√¢y d·ª±ng prompt chu·∫©n h√≥a
      const prompt = buildPrompt(messages, question);
      const reply = await askGemini(prompt);
      addBotMessage(reply);
    } catch {
      addBotMessage(
        "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau."
      );
    }
  };

  // Avatar
  const botAvatar = "https://cdn-icons-png.flaticon.com/512/4712/4712035.png";
  const userAvatar = "https://cdn-icons-png.flaticon.com/512/1946/1946429.png";

  return (
    <>
      {/* Kh√¥ng hi·ªÉn th·ªã chatbot khi ·ªü trang auth */}
      {!isAuthPage && !open && (
        <div
          className="chatbot-trigger fixed-button-base chatbot-btn"
          onClick={() => setOpen(true)}
          title="üí¨ DaiVietBlood AI Assistant - T∆∞ v·∫•n hi·∫øn m√°u 24/7"
        >
          <div className="chatbot-button">
            <span className="emoji">üí¨</span>
            <span>DaiVietBlood AI</span>
            <div className="status-indicator"></div>
          </div>
        </div>
      )}
      {!isAuthPage && open && (
        <div className={`chatbot-window ${isExpanded ? "expanded" : "normal"}`}>
          {/* Header */}
          <div className="chatbot-header">
            <div className="chatbot-header-info">
              <img src={botAvatar} alt="bot" className="chatbot-avatar" />
              <div>
                <div className="chatbot-title">
                  ü©∏ DaiVietBlood AI Assistant
                </div>
                <div className="chatbot-subtitle">
                  T∆∞ v·∫•n hi·∫øn m√°u ‚Ä¢ Nh√≥m m√°u ‚Ä¢ S·ª©c kh·ªèe 24/7
                </div>
                <div className="chatbot-greeting">
                  Xin ch√†o <b>{userName || "B·∫°n"}</b>! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho
                  b·∫°n?
                </div>
              </div>
            </div>
            <div className="chatbot-controls">
              <button
                onClick={handleToggleExpand}
                className="chatbot-control-btn expand"
                title={
                  isExpanded
                    ? "üì± Thu nh·ªè ƒë·ªÉ ti·∫øp t·ª•c duy·ªát web"
                    : "üîç Ph√≥ng to ƒë·ªÉ tr√≤ chuy·ªán tho·∫£i m√°i h∆°n"
                }
              >
                {isExpanded ? "üóó" : "üóñ"}
              </button>
              <button
                onClick={() => setOpen(false)}
                className="chatbot-control-btn close"
                title="‚ùå ƒê√≥ng tr√≤ chuy·ªán - H·∫πn g·∫∑p l·∫°i!"
              >
                √ó
              </button>
            </div>
          </div>
          {/* N·ªôi dung chat */}
          <div
            ref={chatContentRef}
            className={`chatbot-content ${isExpanded ? "expanded" : "normal"}`}
          >
            {messages.map((msg, i) => (
              <div
                key={msg.id || i}
                className={`message ${msg.from === "user" ? "user" : ""}`}
              >
                <img
                  src={msg.from === "user" ? userAvatar : botAvatar}
                  alt={msg.from}
                  className="message-avatar"
                />
                <div className={`message-content ${msg.from}`}>
                  {msg.from === "bot" && msg.isTyping ? (
                    <TypewriterText
                      key={`stable-${msg.id}`}
                      text={msg.text}
                      onComplete={handleTypingComplete}
                      messageId={msg.id}
                      shouldStop={shouldStopTyping}
                      scrollToBottom={scrollToBottom}
                    />
                  ) : msg.from === "bot" ? (
                    <FormattedText text={msg.text} />
                  ) : (
                    msg.text
                  )}
                </div>
              </div>
            ))}
            {loading && (
              <div className="loading-indicator">
                <img src={botAvatar} alt="bot" className="message-avatar" />
                <div className="loading-content">
                  <span className="loading-text">ƒêang suy nghƒ©</span>
                  <div className="loading-dots">
                    <div className="loading-dot"></div>
                    <div className="loading-dot"></div>
                    <div className="loading-dot"></div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* N√∫t d·ª´ng ph·∫£n h·ªìi khi bot ƒëang typing */}
          {isTyping && messages.some((msg) => msg.isTyping) && (
            <div className="stop-typing-container">
              <button
                onClick={stopTyping}
                className="stop-typing-btn"
                title="D·ª´ng ph·∫£n h·ªìi ƒë·ªÉ h·ªèi c√¢u kh√°c"
              >
                <span>‚èπÔ∏è</span>
                D·ª´ng ph·∫£n h·ªìi
              </button>
            </div>
          )}

          {/* G·ª£i √Ω c√¢u h·ªèi */}
          <div className="suggestions-container">
            {suggestions.slice(0, 6).map((s, idx) => (
              <button
                key={idx}
                className={`suggestion-btn ${
                  s === "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p" && showFAQ
                    ? "active"
                    : "normal"
                }`}
                disabled={loading}
                onClick={() => handleSend(s)}
              >
                {s}
              </button>
            ))}
          </div>

          {/* FAQ List */}
          {showFAQ && (
            <div className="faq-container">
              {faqList.map((q, idx) => (
                <button
                  key={idx}
                  className="faq-btn"
                  onClick={() => {
                    handleSend(q.question, true);
                    setShowFAQ(false);
                  }}
                >
                  {q.question}
                </button>
              ))}
              <button
                className="faq-close-btn"
                onClick={() => setShowFAQ(false)}
              >
                ƒê√≥ng
              </button>
            </div>
          )}

          {/* Input */}
          <div className="input-container">
            <input
              className="input-field"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
              placeholder="üí≠ H·ªèi v·ªÅ hi·∫øn m√°u, nh√≥m m√°u, s·ª©c kh·ªèe..."
              disabled={loading}
            />
            <button
              className="send-btn"
              onClick={() => handleSend()}
              disabled={loading}
              title="G·ª≠i tin nh·∫Øn"
            >
              <span role="img" aria-label="send">
                ‚û§
              </span>
            </button>
          </div>
        </div>
      )}
    </>
  );
}